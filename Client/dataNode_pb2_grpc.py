# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import dataNode_pb2 as dataNode__pb2


class DataNodeServiceStub(object):
    """Definición del servicio gRPC para la transferencia de bloques de archivo
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DownloadBlock = channel.unary_unary(
                '/dataNode.DataNodeService/DownloadBlock',
                request_serializer=dataNode__pb2.DownloadBlockRequest.SerializeToString,
                response_deserializer=dataNode__pb2.DownloadBlockResponse.FromString,
                )
        self.UploadBlock = channel.unary_unary(
                '/dataNode.DataNodeService/UploadBlock',
                request_serializer=dataNode__pb2.UploadBlockRequest.SerializeToString,
                response_deserializer=dataNode__pb2.UploadBlockResponse.FromString,
                )


class DataNodeServiceServicer(object):
    """Definición del servicio gRPC para la transferencia de bloques de archivo
    """

    def DownloadBlock(self, request, context):
        """Método para descargar un bloque de archivo
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadBlock(self, request, context):
        """Método para cargar un nuevo bloque de archivo
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataNodeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DownloadBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.DownloadBlock,
                    request_deserializer=dataNode__pb2.DownloadBlockRequest.FromString,
                    response_serializer=dataNode__pb2.DownloadBlockResponse.SerializeToString,
            ),
            'UploadBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadBlock,
                    request_deserializer=dataNode__pb2.UploadBlockRequest.FromString,
                    response_serializer=dataNode__pb2.UploadBlockResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dataNode.DataNodeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataNodeService(object):
    """Definición del servicio gRPC para la transferencia de bloques de archivo
    """

    @staticmethod
    def DownloadBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dataNode.DataNodeService/DownloadBlock',
            dataNode__pb2.DownloadBlockRequest.SerializeToString,
            dataNode__pb2.DownloadBlockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dataNode.DataNodeService/UploadBlock',
            dataNode__pb2.UploadBlockRequest.SerializeToString,
            dataNode__pb2.UploadBlockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class DataNodeServicerStub(object):
    """Definición de la clase base para la implementación de los métodos del servicio DataNode
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DownloadBlock = channel.unary_unary(
                '/dataNode.DataNodeServicer/DownloadBlock',
                request_serializer=dataNode__pb2.DownloadBlockRequest.SerializeToString,
                response_deserializer=dataNode__pb2.DownloadBlockResponse.FromString,
                )
        self.UploadBlock = channel.unary_unary(
                '/dataNode.DataNodeServicer/UploadBlock',
                request_serializer=dataNode__pb2.UploadBlockRequest.SerializeToString,
                response_deserializer=dataNode__pb2.UploadBlockResponse.FromString,
                )


class DataNodeServicerServicer(object):
    """Definición de la clase base para la implementación de los métodos del servicio DataNode
    """

    def DownloadBlock(self, request, context):
        """Método para descargar un bloque de archivo
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadBlock(self, request, context):
        """Método para cargar un nuevo bloque de archivo
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataNodeServicerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DownloadBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.DownloadBlock,
                    request_deserializer=dataNode__pb2.DownloadBlockRequest.FromString,
                    response_serializer=dataNode__pb2.DownloadBlockResponse.SerializeToString,
            ),
            'UploadBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadBlock,
                    request_deserializer=dataNode__pb2.UploadBlockRequest.FromString,
                    response_serializer=dataNode__pb2.UploadBlockResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dataNode.DataNodeServicer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataNodeServicer(object):
    """Definición de la clase base para la implementación de los métodos del servicio DataNode
    """

    @staticmethod
    def DownloadBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dataNode.DataNodeServicer/DownloadBlock',
            dataNode__pb2.DownloadBlockRequest.SerializeToString,
            dataNode__pb2.DownloadBlockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dataNode.DataNodeServicer/UploadBlock',
            dataNode__pb2.UploadBlockRequest.SerializeToString,
            dataNode__pb2.UploadBlockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
